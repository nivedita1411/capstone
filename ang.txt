angular.json - > npm install bootstrap@4
npx ng generate guard guard/auth
npx ng g service services/auth --skipTests=true
npx ng g module players --routing
npx ng g service players/services/movie
npx ng g c players/list
------------------------------------------------------
part of services
----------------

.pipe(catchError(this.handleError));

handleError(error:HttpErrorResponse)
  {
    var errmsg = error.status + '\n' + error.statusText + '\n' + error.error
    alert(errmsg)
    return throwError(errmsg)
  }

app-routing format: 

<header>
<a routerLink = "/players">Players</a>

-- in routes

{path:'players',redirectTo:'players/list',pathMatch:'full'},
{path:'players/list',component:listplayersComponent},

{path:'GetPlayer', component:GetplayersComponent},
  {path:'AddPlayer',component:AddplayerComponent},

{path:'player/list',component:},
--------------------------------------------------
import ( NgModule } from
*Pangular/core:
import (RouterModule, Routes ) from @angular/router!;
3
import ( Listcomponent } from
"-/players/list/list.component";
const
routes: Routes = [];
RouterModule. forRoot ([
( path: 'players', component: ListComponent }
-------------
App routing
----------------------------------------------
--app.module.ts

imports: [
    BrowserModule,
    AppRoutingModule,
    HttpClientModule,
    FormsModule,
    ReactiveFormsModule
  ],

--------------------------------------
button:
<input type="button" value="Show Movies" class="btn btn-success" (click)="Show()">
Show()
{
    this.router.navigate(['/listmovies'])
}
--------------------------------------------------
/////////////////////////////////////////////////
---------------------------------------------------

services

import { Injectable } from '@angular/core';
import { IMovie } from '../model/imovie';
import {HttpClient , HttpErrorResponse, HttpHeaders} from "@angular/common/http";
import { Observable, throwError } from 'rxjs';
import { Idetails } from '../model/idetail';
import { HttpHandler } from '@angular/common/http';
import { HttpResponse } from '@angular/common/http';
import {catchError} from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class AdminService {


  private url = "https://8080-bacdcffacbbecabcdadeafbbdcaeafe.premiumproject.examly.io/Admin";
  constructor(private httpclient:HttpClient) { }

  
  GetPlayers() : Observable<Player[]>
  {
    return this.httpclient.get<Player[]>(this.url + '/GetPlayer')
  }
  
  getPlayer(id:number):Observable<Player>
  {
    return this.httpclient.get<Player>(this.url + '/GetPlayer/' + id)
  }

  httpOptions = {headers:new HttpHeaders({'Content-type':'application/json'})}
  AddPlayer(playerdata:Player):Observable<Player>
  {
    return this.httpclient.post<Player>(this.url+ '/AddPlayer',playerdata,this.httpOptions)
  }

  editPlayer(playerdata:Player):Observable<Player>
  {
    return this.httpclient.put<Player>(this.url + '/EditPlayer/'+ playerdata.id,playerdata,this.httpOptions)
  }
  deletePlayer(id:number):Observable<Player>
  {
    return this.httpclient.delete<Player>(this.url + '/DeletePlayer/' + id)
  }

  // addDetails(detailsdata: Idetails) :Observable<Idetails>{
  //   return this.httpclient.post<Idetails>(this.url2 + '/AddMovieDetails',detailsdata, this.httpOptions).pipe(catchError(this.handleError));
  // }

  // handleError(error:HttpErrorResponse)
  // {
  //   var errmsg = error.status + '\n' + error.statusText + '\n' + error.error
  //   alert(errmsg)
  //   return throwError(errmsg)
  // }
}


-------------------------------------------------------------------------------

get all players

Typescript

import { Component, OnInit } from '@angular/core';
import { AdminService } from '../services/admin.service';
import { Player } from '../models/player';

@Component({
  selector: 'app-getplayers',
  templateUrl: './getplayers.component.html',
  styleUrls: ['./getplayers.component.css']
})
export class GetplayersComponent implements OnInit {

  playerdata: Player[] = []

  constructor(private as:AdminService) { 
    this.as.GetPlayers().subscribe(data =>{this.playerdata.push(...data)})
    console.log(this.playerdata)
  }

  ngOnInit(): void {
  }

}
-----
Html

<div class = "container">
    <div class = "jumbotron">
        <h1>Player Listing</h1>
        <table class = "table">
            <thead>
                <th>Id</th>
                <th>Name</th>
                <th>Age</th>
                <th>Category</th>
                <th>Bidding Price</th>
                <th>Team ID</th>
            </thead>
            <tbody>
                <tr *ngFor = "let m of playerdata">
                    <td> {{m.id}} </td>
                    <td> {{m.name}} </td>
                    <td> {{m.age}} </td>
                    <td> {{m.category}} </td>
                    <td> {{m.biddingPrice}} </td>
                    <td> {{m.teamId}} </td>
                    
                    <a [routerLink] = "['/GetPlayer/',m.id]">Details</a>&nbsp;&nbsp;
                    <a [routerLink] = "['/EditPlayer/',m.id]">Edit</a>&nbsp;&nbsp;
                    <a [routerLink] = "['/DeletePlayer/',m.id]">Delete</a>&nbsp;&nbsp;
                </tr>
            </tbody>
        </table>
    </div>
</div>


------------------------------------------------------------------------------
get player - id

Typescript

import { Component, OnInit } from '@angular/core';
import { AdminService } from '../services/admin.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Player } from '../models/player';

@Component({
  selector: 'app-findplayer',
  templateUrl: './findplayer.component.html',
  styleUrls: ['./findplayer.component.css']
})
export class FindplayerComponent implements OnInit {

  constructor(private as:AdminService, private ar:ActivatedRoute, private router:Router) { }

  playerdata:Player
  id:number

  ngOnInit(): void {

    const tid = this.ar.snapshot.paramMap.get('id')
    this.id = Number(tid)
    this.as.getPlayer(this.id).subscribe((data:Player) => {
      this.playerdata = data;
    })
  }

  Show()
  {
    this.router.navigate(['/GetPlayer'])
  }

}

-----------------

Html

<!-- <p>findplayer works!</p> -->

<!-- <p>findmovie works!</p> -->

<h3>Details of Player {{playerdata.name}} </h3>
<div>
    Id: {{playerdata.id}}<br>
    Name: {{playerdata.name}}<br>
    Category: {{playerdata.category}}<br>
    Bidding Price: {{playerdata.biddingPrice}}<br>
</div>
<br>
<br>
<a [routerLink] = "['/GetPlayer']">Back To List</a>
<br>
<br>
<!-- <input type="button" value="Show Players" class="btn btn-success" (click)="Show()"> -->




---------------------------------------------------------------------------------
Add player

Typescript

import { Component, OnInit } from '@angular/core';
import { Player } from '../models/player';
import { AdminService } from '../services/admin.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-addplayer',
  templateUrl: './addplayer.component.html',
  styleUrls: ['./addplayer.component.css']
})
export class AddplayerComponent implements OnInit {

  playerdata: Player = {id:0,name:'',age:0,category:'',biddingPrice:0,teamId:0}

  constructor(private as: AdminService, private route: Router) { }

  saveData(player:Player):void
  {
    this.playerdata = player
    this.as.AddPlayer(this.playerdata).subscribe(
      ()=>{
        alert('Record Added Successfully')
        this.route.navigate(['/GetPlayer'])
        
      }
    )
  }

  ngOnInit(): void {
  }

}


--------------
Html

<!-- <p>addplayer works!</p> -->
<!-- <p>add-movie works!</p> -->

<h2>Adding Players</h2>
<hr>
<form (ngSubmit)="saveData(playerdata)" #playerform="ngForm">
    <div>
        <label for="name">Player Name</label>
        <input type="text" id="name" name="name" placeholder="enter player name"
        [(ngModel)]="playerdata.name" required #name="ngModel">
    </div>
    <div>
        <label for="age">Age</label>
        <input type="text" id="age" name="age" placeholder="enter age"
        [(ngModel)]="playerdata.age" required #age="ngModel">
    </div>
    <div>
        <label for="category">Category</label>
        <input type="text" id="category" name="year" placeholder="enter category"
        [(ngModel)]="playerdata.category" required #category="ngModel">
    </div>
    <div>
        <label for="biddingPrice">Bidding Price</label>
        <input type="text" id="biddingPrice" name="year" placeholder="enter bidding price"
        [(ngModel)]="playerdata.biddingPrice" required #biddingPrice="ngModel">
    </div>
    <div>
        <label for="teamId"> Team ID</label>
        <input type="text" id="teamId" name="teamId" placeholder="enter Team ID"
        [(ngModel)]="playerdata.teamId" required #teamId="ngModel">
    </div>
    <br>
    <p>
        <input type="submit" value="Save" class="btn btn-Info" [disabled]="!playerform.valid">
    </p>
</form>



-----------------------------------------------------------------------------------
edit player

Typescript

import { Component, OnInit } from '@angular/core';
import { AdminService } from '../services/admin.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Player } from '../models/player';

@Component({
  selector: 'app-editplayer',
  templateUrl: './editplayer.component.html',
  styleUrls: ['./editplayer.component.css']
})
export class EditplayerComponent implements OnInit {

  constructor(private as:AdminService, private route: Router, private ar: ActivatedRoute) { }

  playerdata: Player = {id:0,name:'',age:0,category:'',biddingPrice:0, teamId:0}
  id:number

  ngOnInit(){
    const tid = this.ar.snapshot.paramMap.get('id')
    this.id = Number(tid)
    this.getPlayer(this.id)
  }

  getPlayer(id:number){
    this.as.getPlayer(id).subscribe((data:Player) => this.playerdata = data)
  }

  saveData(player:Player)
  {
    this.playerdata = player
    this.as.editPlayer(this.playerdata).subscribe(() => {
      alert("Record Edited")
      this.route.navigate(['/GetPlayer'])
    })
  }

}



Html

<!-- <p>editplayer works!</p> -->

<h2>Editing Players</h2>
<hr>
<form (ngSubmit)="saveData(playerdata)" #playerform="ngForm">
    <div>
        <label for="id">ID</label>
        <input type="text" id="id" name="id" readonly [(ngModel)]="playerdata.id">
    </div>
    <div>
        <label for="name">Player Name</label>
        <input type="text" id="name" name="name" placeholder="enter player name"
        [(ngModel)]="playerdata.name" required #name="ngModel">
    </div>
    <div>
        <label for="age">Age</label>
        <input type="text" id="age" name="age" placeholder="enter age"
        [(ngModel)]="playerdata.age" required #age="ngModel">
    </div>
    <div>
        <label for="category">Category</label>
        <input type="text" id="category" name="category" placeholder="enter category"
        [(ngModel)]="playerdata.category" required #category="ngModel">
    </div>
    <div>
        <label for="biddingPrice">Bidding Price</label>
        <input type="text" id="biddingPrice" name="biddingPrice" placeholder="enter bidding price"
        [(ngModel)]="playerdata.biddingPrice" required #biddingPrice="ngModel">
    </div>
    <div>
        <label for="teamId"> Team ID</label>
        <input type="text" id="teamId" name="teamId" placeholder="enter Team ID"
        [(ngModel)]="playerdata.teamId" required #teamId="ngModel">
    </div>
    <br>
    <p>
        <input type="submit" value="Save" class="btn btn-Info" [disabled]="!playerform.valid">
    </p>
</form>




----------------------------------------------------------------------------------------
delete players

Typescript

import { Component, OnInit } from '@angular/core';
import { AdminService } from '../services/admin.service';
import { ActivatedRoute, Router } from '@angular/router';
import { Player } from '../models/player';

@Component({
  selector: 'app-deleteplayer',
  templateUrl: './deleteplayer.component.html',
  styleUrls: ['./deleteplayer.component.css']
})
export class DeleteplayerComponent implements OnInit {

  constructor(private as:AdminService, private ar: ActivatedRoute, private route: Router) { }

  id : number
  playerdata : Player = {id:0,name:'',age:0,category:'',biddingPrice:0, teamId:0}

  ngOnInit(): void {
    const tid = this.ar.snapshot.paramMap.get('id')
    this.id = Number(tid)
    this.getPlayer(this.id)
  }

  getPlayer(id : number) {
    this.as.getPlayer(id).subscribe((data : Player) =>
      this.playerdata = data
    )
  }
 
  saveData(player : Player) : void {
    this.playerdata = player
    this.as.deletePlayer(this.id).subscribe(() => {
      alert("Record Deleted")
      this.route.navigate(['/GetPlayer'])
    })
  }

}




Html

<!-- <p>deleteplayer works!</p> -->

<h2>Delete Player</h2>
<hr>
<form (ngSubmit)="saveData(playerdata)" #playerform="ngForm">
    <div>
        <label for="id">ID</label>
        <input type="text" id="id" name="id" readonly [(ngModel)]="playerdata.id">
    </div>
    <div>
        <label for="name">Player Name</label>
        <input type="text" id="name" name="name" readonly [(ngModel)]="playerdata.name">
    </div>
    <div>
        <label for="age">Age</label>
        <input type="text" id="age" name="age" placeholder="enter age"
        [(ngModel)]="playerdata.age" required #age="ngModel">
    </div>
    <div>
        <label for="category">Category</label>
        <input type="text" id="category" name="category" readonly [(ngModel)]="playerdata.category" >
    </div>
    <div>
        <label for="biddingPrice">Bidding Price</label>
        <input type="text" id="biddingPrice" name="biddingPrice" readonly [(ngModel)]="playerdata.biddingPrice" >
    </div>
    <div>
        <label for="teamId"> Team ID</label>
        <input type="text" id="teamId" name="teamId"  readonly [(ngModel)]="playerdata.teamId" >
    </div>
    <br>
    <p>
        <input type="submit" value="Delete" class="btn btn-Info">
    </p>
</form>

---------------------------------------------------------------------------------------------

reactive form

ts:
---

import { Component, OnInit } from '@angular/core';
import { IMovie } from '../model/imovie';
import { FormBuilder, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { MovieserviceService } from '../services/movieservice.service';
 
@Component({
  selector: 'app-reactform',
  templateUrl: './reactform.component.html',
  styleUrls: ['./reactform.component.css']
})
export class ReactformComponent implements OnInit {
  moviedata : IMovie
  constructor (private fb : FormBuilder ,private ms : MovieserviceService , private route : Router ){ }
  movieform = this.fb.group({
    name : ['', Validators.required],
    yearRelease : ['', [Validators.min(2000) , Validators.max(2023)]],
   
    rating : ['', [Validators.required , Validators.min(2000) , Validators.max(2023)]]
 
  })
 
  onsubmit-----savedata(movieform:FormGroup) : void {
    this.moviedata = this.movieform.value
    if(this.moviedata.rating > 5){
      alert('Error in ratings')
      return
    }
    console.log(this.moviedata)
    this.ms.addMovie(this.moviedata).subscribe(
      () => {
        alert('Record added Successfully');
        this.route.navigate(['/listmovies'])
      })
    }
 
 
   
      ngOnInit() {
      }
  }
 
-------movieform - fromData
  // constructor() { }
html:
-----

<p>react-form works!</p>
<h2>Adding Movie Data</h2>
<hr>
<form [formGroup]="movieform" (ngSubmit)='savedata(movieform)'>
    <div class="container jumbotron" style="width: 500px;">
            <div class="form-group">
                <label for="name">Your Name</label>
                <input type= "text" id="name" name="name" formControlName="name" class="form-control">
            </div>
 
            <div class="form-group">                                                                                                        
                <label for="year">Year</label>
                <input type= "text" id="yearReleased name="yearReleased formControlName="yearReleased" class="form-control">
            </div>
 
            <div class="form-group">
                <label for="rating">Rating</label>
                <input type= "text" id="rating" name="rating" formControlName="rating" class="form-control">
            </div>
                <br>
                <br>
                <p>
                    <button type ="submit" class="btn btn-info">Save</button>
                </p>
    </div>
 
</form>

------------------------------------------------


<nav class="navbar navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">Navbar</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav">
          <a class="nav-link" routerLink="/GetTeam">List Teams</a>
          <a class="nav-link" routerLink="/AddPlayer">Add Player</a>
          <a class="nav-link" routerLink="/AddTeam">Add Team</a>
          <a class="nav-link" routerLink="/GetPlayer">List Player</a>
        </div>
      </div>
    </div>
  </nav>

import { Component, OnInit } from '@angular/core';
import { JobService } from '../services/job.service';
import { FormBuilder, Validators } from '@angular/forms';
 
@Component({
  selector: 'app-job-posting-form',
  templateUrl: './job-posting-form.component.html',
  styleUrls: ['./job-posting-form.component.css']
})
export class JobPostingFormComponent implements OnInit {
 
  constructor(private ms : JobService, private fb : FormBuilder) { }
 
  jobPosting : any
 
  jobPostingForm = this.fb.group({
    title : ['', Validators.required],
    department : ['', Validators.required],
    location : ['', Validators.required],
    responsibilities : ['', Validators.required],
    qualifications : ['', Validators.required],
    applicationDeadline : ['', Validators.required]
  })
 
  submitJobPosting() {
    this.jobPosting = this.jobPostingForm.value
    this.ms.createJobPosition(this.jobPosting).subscribe(() => {
      alert("Submitted")
    })
  }
 
  ngOnInit(): void {
  }
 
}

<!-- <p>job-posting-form works!</p> -->
<h2>Create Job Posting</h2>

<div class="jumbotron container">
    <form [formGroup]="jobPostingForm" (ngSubmit)="submitJobPosting()">
        <label for="title">Job Title</label>
        <input id="title" >

        <label for="department">Department</label>
        <input id="department" >

        <label for="location">Location</label>
        <input id="location" >

        <label for="responsibilities">Responsibilities</label>
        <textarea id="responsibilities"></textarea>

        <label for="qualifications">Qualifications</label>
        <textarea id="qualifications"></textarea>

        <label for="applicationDeadline">Application Deadline</label>
        <input id="applicationDeadline" >

        <button type="submit">Submit</button>

    </form>
</div>


import { Component, OnInit } from '@angular/core';
import { JobService } from '../services/job.service';
import { FormBuilder, Validators } from '@angular/forms';


@Component({
  selector: 'app-job-posting-form',
  templateUrl: './job-posting-form.component.html',
  styleUrls: ['./job-posting-form.component.css']
})
export class JobPostingFormComponent implements OnInit {

  

  constructor(private jb : JobService, private fb : FormBuilder) { }

  jobPosting: any

  jobPostingForm = this.fb.group({
    title : ['',Validators.required],
    department: ['',Validators.required],
    location : ['',Validators.required],
    responsibilities : ['',Validators.required],
    qualifications:['',Validators.required],
    applicationDeadline:['',Validators.required]
  })

  submitJobPosting(){
    this.jobPosting = this.jobPostingForm.value
    console.log(this.jobPosting)
    this.jb.createJobPosition(this.jobPosting).subscribe(
      ()=> {
        // this.router.navigate(['/'])
        alert("Submitted")
      }
    )
  }


  ngOnInit(): void {
  }

}
-------------dropdown
 ngOnInit(): void {

    this.ss.getJobPostings().subscribe((data:JobPosition[])=>{
      console.log(data)
      this.jobPositions.push(...data)
      // console.log(this.positions)
      console.log(this.jobPositions)
      

    })

  }


<label>Select Job Position</label>
    <select  id="jobPositionId" for="jobPositionId" formControlName="jobPositionId" required>
    <option *ngFor="let p of jobPositions" [value]="p.id">{{p.title}}</option>
</select>

----------------------------------------------


<h1>Register Forms</h1>
<hr>
<form #stdform='ngForm' (ngSubmit)="RegisterStudent(stdform)">
    <div>
        <label for="firstname">First Name</label>
        <input id="firstname" name="firstname" type="text" ngModel required #firstname="ngModel">
        <div *ngIf="firstname.invalid && (firstname.dirty || firstname.touched)" style="color: red;">
            <div *ngIf="firstname.errors.required">
                First Name cannot be blank
            </div>
        </div>
    </div>
    <div>
        <label for="lastname">Last Name</label>
        <input id="lastnname" name="lastname" type="text" ngModel required maxlength="25" minlength="3"
            #lastname="ngModel">
        <div *ngIf="lastname.invalid && (lastname.dirty || lastname.touched)" style="color: red;">
            <div *ngIf="lastname.errors.required">
                Last Name cannot be blank
            </div>
            <div *ngIf="lastname.errors.maxlength">
                Name not more than 30 chars
            </div>
            <div *ngIf="lastname.errors.minlength">
                Name should be 5 chars
            </div>
        </div>
    </div>
    <div>
        <label for="email">Email</label>
        <input id="email" name="email" type="text" ngModel>
    </div>
    <div>
        <label>Gender:</label>
        <input type="radio" name="gender" value="male" checked [(ngModel)]="gender">Male
        <input type="radio" name="gender" value="female" [(ngModel)]="gender">Female
    </div>
    <div>
        <label>Marrital Status:</label>
        <!-- <input type="checkbox" name="ismarried" id="ismarried" [(ngModel)]="ismarried">Marrital Status -->
        <input type="radio" name="ismarried" value="Married" [(ngModel)]="gender">Married
        <input type="radio" name="ismarried" value="Unmarried" [(ngModel)]="gender">Unmarried
    </div>
    <div>
        <label for="city">City</label>
        <select id="city" name="city" [(ngModel)]="CityId">
            <option value="1">Mumbai</option>
            <option value="2">Pune</option>
            <option value="3">Delhi</option>
            <option value="4">Chennai</option>
        </select>=

    </div>
    <div>
        <input type="submit" value="Save">
    </div>
</form>

<table>
    <b>Total={{GetTotal()}}</b>
    <h2>Date Processing</h2>
    <p>Date without Pipe :{{todaydate}}</p>
    <p>Date without Pipe :{{todaydate| date}}</p>
    <p>Date Full :{{todaydate| date:'Fulldate'}}</p>
    <p>Date Medium :{{todaydate| date:'medium'}}</p>
    <p>Date Short :{{todaydate| date:'short'}}</p>
    <p>Time :{{todaydate| date:'hh:mm:ss'}}</p>
<td>{{emp.salary*0.2}}</td>
 
 
    <h1>{{msg}}</h1>
</table>

<tbody>
        <tr *ngFor="let d of emplist">
            <td>{{d.id }}</td>
            <td>{{d.name | uppercase}}</td>
            <td>{{d.salary | currency:'INR'}}</td>
            <td>{{d.city | lowercase}}</td>
        </tr>
    </tbody>


onSubmit() {
    // if(this.scheduleForm.valid) {
    // }


viewbag
<select asp-for="DeptId" asp-items="ViewBag.DeptId">
            <option value=''>Choose Departments</option>
        </select>

-------------------------------------------------------------------------

[Index("Id",IsUnique=true)]

ViewBag.DeptId = new SelectList(context.Departments,"Id","DepartmentName");

@Html.DropDownList(m=>m.Event.ID,ViewBag.EventID as SelectList, "ID","EventName")

--------------------------------------------------------------

builder.Services.AddDbContext<EmsDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString("DevConnection"))); - program.cs
------------------------------------------------------------------
void ShowDisconnect()
{
    string connectionString = "User ID=sa;password=examlyMssql@123; server=localhost;Database=MyDatabaseNY;trusted_connection=false;Persist Security Info=False;Encrypt=False";
    string cmdtext = "insert into product values(@id,@name,@price,@stock)";
    SqlConnection connection = null;
    SqlDataAdapter adapter = null;
    DataSet ds = null;
    DataTable prodTable = null;
    try
    {
        ds = new DataSet();
        connection = new SqlConnection(connectionString);
        adapter = new SqlDataAdapter("select * from product", connection); //only select commands can be given in adapter
        adapter.Fill(ds,"Prods");
        prodTable = ds.Tables["Prods"];
        Console.WriteLine($"Rows = {prodTable.Rows.Count}");
        Console.WriteLine($"Columns = {prodTable.Columns.Count}");
        foreach(DataRow row in prodTable.Rows)
        {
            Console.WriteLine($"{row["id"]} -- {row["name"]} -- {row["price"]} -- {row["stock"]}");
        }

    }
    catch (Exception ex)
    {
        
        Console.WriteLine(ex.Message);
    }
-------------------------------------------------------

sh run.sh
---------------------------------------------------------
model :
using System;
using System.ComponentModel.DataAnnotations;
using System.Collections.Generic;

namespace EMS_dbfirst.Models;

public partial class Department
{
    public int Id { get; set; }
    [Display(Name = "Department Name")]
    [Required(ErrorMessage = "Department Name cannot be blank")]
    public string DeptName { get; set; } = null!;
    
    public string Location { get; set; } = null!;

    public virtual ICollection<Employee> Employees { get; set; } 
}

public virtual grade(class) grade {get;set;}
---------------------------------

    [DataType(DataType.Date)]
    [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:yyyy-MM-dd}")]
    [DobCheck(ErrorMessage = "Atleast 25 years of age required")]
-----------------
where : 
public IActionResult DisplayBooksForLibraryCard(int id)
        {
            var data=context.Books.Where(e=>e.Id==id);
             return View(data);
        }
-----------------------------
Regular Expression

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
// using dotnetapp.Attributes; // Replace with the actual namespace
 
namespace dotnetapp.Models
{
    // Write youe LibraryCard class here...
    public class LibraryCard
    {
        [Key]
        public int Card_Id{get;set;}
        [RegularExpression(@"LC-\d{5}", ErrorMessage="Card Number should be of Format LC-XXXXX")]
        public string CardNumber{get;set;}
        [Required(ErrorMessage="Member name should not be empty")]
        [MaxLength(100)]
        public string? MemberName{get;set;}
        [Required]
        [DataType(DataType.Date)]
        [DisplayFormat(ApplyFormatInEditMode=true,DataFormatString= "{0:yyyy/MM/dd}")]
        [Range(typeof(DateTime),"Now","2050/12/12")]
        public DateTime ExpiryDate{get;set;}
 
        public ICollection<Book>? Books{get;set;}
 
    }
}

-----------------------------------------------------------------

public IActionResult Create ()
{
    //dropdown for deptname
    ViewBag.DeptId = new SelectList(context.Departments,"Id","DepartmentName");
    return View();
}
-----------------------------------
using System.ComponentModel.DataAnnotations;
namespace EMS_dbfirst.Models;

public class DobCheck: ValidationAttribute
{
    public override bool IsValid(object value)
    {
        DateTime birthdate = Convert.ToDateTime(value);
        int year = birthdate.Year;
        int currentyear = DateTime.Now.Year;
        if(currentyear-year >= 25)
        {
            return true;
        }
        else return false;
    }
}

DBContext--------------------------------------

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.AspNetCore.Mvc;
// using Microsoft.EntityFrameworkCore.SqlServer;
using Grade.Models;

namespace Grade.Models
{
    public class SGMSDbContext : DbContext
    {
         public virtual DbSet<student> students {get;set;}
        public virtual DbSet<grade> grades {get;set;}
        

        public SGMSDbContext () {}

        public SGMSDbContext (DbContextOptions<SGMSDbContext> options) : base (options)
        {
        }

       

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if(!optionsBuilder.IsConfigured){
                optionsBuilder.UseSqlServer("User ID=sa;password=examlyMssql@123; server=localhost;Database=SGMSDb;trusted_connection=false;Persist Security Info=False;Encrypt=False;");
            }
 
        }
    }
}

----------------------------------crud
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Grade.Models;
using Microsoft.EntityFrameworkCore;

namespace Grade.Controllers
{
    
    public class StudentController : Controller
    {
        private readonly SGMSDbContext context;

        public StudentController(SGMSDbContext _context)
        {
            context = _context;
        }

        public IActionResult Index()
        {
            var data = context.students.ToList();
            return View(data);
        }

        public IActionResult AddnewStudent( )
        {
            return View();
        }
        [HttpPost]

        public IActionResult AddnewStudent(student stu)
        {
            if(ModelState.IsValid)
            {
                context.students.Add(stu);
                context.SaveChanges();

                return RedirectToAction("Index");
            }

            return View(stu);

        }

        public IActionResult UpdateDetails(int Id)
        {
            var data = context.students.Find(Id);
            return View(data);
        }
        [HttpPost]
        public IActionResult UpdateDetails(student s)
        {
            if(ModelState.IsValid)
            {
                student stud = context.students.Find(s.Id);
                stud.StudentName = s.StudentName;
                stud.DOB = s.DOB;
                stud.photo = s.photo;
                stud.Height = s.Height;
                stud.Weight = s.Weight;

                context.SaveChanges();

                return RedirectToAction("Index");

            }

            return View();
        }

        public IActionResult DeleteStudent (int Id)
        {
            var data = context.student.Find(Id);
            return View(data);
        }
        [HttpPost]
        public IActionResult DeleteStudent (student s)
        {
            student stude = context.Find(s.Id);
            context.students.Remove(stude);
            context.SaveChanges();

            return RedirectToAction("Index");
        }

        
    }
}

---------------------------------
Views

//CREATE.cshtml
 
@model Department
<h1>Add Record</h1>
@using(Html.BeginForm())
{
   <div class='form-horizontal'>
 
<div class='form-group' >
    @Html.DisplayNameFor(m=>m.Id)
     @* @Html.EditorFor(m=>m.Id)
      @Html.ValidationMessageFor(m=>m.Id) *@
 
</div>
 
<div class='form-group'>
    @Html.DisplayNameFor(m=>m.DeptName)
     @Html.EditorFor(m=>m.DeptName)
      @Html.ValidationMessageFor(m=>m.DeptName)
 
</div>
 
 
<div class='form-group'>
    @Html.DisplayNameFor(m=>m.Location)
     @Html.EditorFor(m=>m.Location)
      @Html.ValidationMessageFor(m=>m.Location)
 
</div>
 
 
   </div>
   <br><br>
   <input type='submit' value='Save'>
}
INDEX.cshtml
 
@model IEnumerable<Department>
 
 @Html.ActionLink("Add Record","Create")
    <table class='table'>
        <thead>
            <th>@Html.DisplayNameFor(m=>m.Id)</th>
             <th>@Html.DisplayNameFor(m=>m.DeptName)</th>
              <th>@Html.DisplayNameFor(m=>m.Location)</th>
        </thead>
 
 
        <tbody>
            @foreach(var data in Model)
            {
            <tr>
                <td>@data.Id</td>
                <td>@data.DeptName</td>
                <td>@data.Location</td>
                <td>@Html.ActionLink("Edit","Edit",new{id=@data.Id})</td>&nbsp;&nbsp;
                <td>@Html.ActionLink("Delete","Delete",new{id=@data.Id})</td>&nbsp;&nbsp;
            </tr>
            }
        </tbody>
    </table>
EDIT.cshtml
 
@model Department
<h1>Add Record</h1>
@using(Html.BeginForm())
{
   <div class='form-horizontal'>
 
<div class='form-group' >
    @Html.DisplayNameFor(m=>m.Id)
     @* @Html.EditorFor(m=>m.Id)
      @Html.ValidationMessageFor(m=>m.Id) *@
 
</div>
 
<div class='form-group'>
    @Html.DisplayNameFor(m=>m.DeptName)
     @Html.EditorFor(m=>m.DeptName)
      @Html.ValidationMessageFor(m=>m.DeptName)
 
</div>
 
 
<div class='form-group'>
    @Html.DisplayNameFor(m=>m.Location)
     @Html.EditorFor(m=>m.Location)
      @Html.ValidationMessageFor(m=>m.Location)
 
</div>
 
 
   </div>
   <br><br>
   <input type='submit' value='Save'>
}
DELETE.cshtml
 
@model Department
<h2> Deleting record of @Model</h2>
<p>@Html.DisplayNameFor(m=>m.Id) : @Html.DisplayFor(m=>m.Id)</p>
<p>@Html.DisplayNameFor(m=>m.DeptName) : @Html.DisplayFor(m=>m.DeptName)</p>    
 <p>@Html.DisplayNameFor(m=>m.Location) : @Html.DisplayFor(m=>m.Location)</p>
 <hr>
 @using(Html.BeginForm())
 {
    <input type="submit" value="Delete ?" style="background-color: red;">
 
 }
@Html.ActionLink("Back to List","List")


PROGRAM.CS
 
var cs=builder.Configuration.GetConnectionString("mycon");
builder.Services.AddDbContext<AppDbContext>(options=>options.UseSqlServer(cs));
STRING
 
User ID=sa;password=examlyMssql@123; server=localhost;Database=*****;trusted_connection=false;Persist Security Info=False;Encrypt=False


------------------------------------------------------------------------

Display 

[10:06] Tejas Milind Shroff
@model IEnumerable<Employee>
 
    <table class= 'table'>
        <thead>
            <th>
                @Html.DisplayNameFor(e=>e.EmpId)
            </th>
            <th>
                @Html.DisplayNameFor(e=>e.Name)
            </th>
            <th>
                @Html.DisplayNameFor(e=>e.Salary)
            </th>
            <th>
                @Html.DisplayNameFor(e=>e.Email)
            </th>
            <th>
                @Html.DisplayNameFor(e=>e.Dob)
            </th>
 
        </thead>
        <tbody>
            @foreach (var item in @Model){
                <tr>
                    <td>
                        @item.EmpId
                    </td>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @item.Salary
                    </td>
                    <td>
                        @item.Email
                    </td>
                    <td>
                        @item.Dob
                    </td>
                   
                </tr>
            }
           
        </tbody>
    </table>
    <br>
   
 
Display view

----------------------------------------------------------------------------------------------------

ADD

@model EMS.Models.Department
 
<h2>Adding department</h2>
 
<hr>
@using (Html.BeginForm()){
    <div>
        @Html.DisplayNameFor(d=>d.Id)
       
        @Html.EditorFor(d=>d.Id)
       
        @Html.ValidationMessageFor(d=>d.Id)
    </div>
   
      <div>
        @Html.DisplayNameFor(d=>d.DeptName)
       
        @Html.EditorFor(d=>d.DeptName)
       
        @Html.ValidationMessageFor(d=>d.DeptName)
    </div>
 
      <div>
        @Html.DisplayNameFor(d=>d.Location)
       
        @Html.EditorFor(d=>d.Location)
       
        @Html.ValidationMessageFor(d=>d.Location)
    </div>
 
    <br>
 
    <input type ="Submit" value ="Save">
    <br>
    <br>
 
    @Html.ActionLink("Back to List","List")
   
}

---------------------------------------------------------------------------

Exception

using System; 
class CustomCalculationException : Exception 

{ 
    public CustomCalculationException(string message) : base(message) 

    { 
    } 
} 
                if (num2 == 0) 

                { 

                    throw new CustomCalculationException("Division by zero is not allowed."); 

                } 

                result = num1 / num2; 

                break; 

            default: 

                throw new CustomCalculationException("Invalid operation requested."); 

        } 
        return result; 

-----------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Katthak.Models
{
    public class Student
    {
        public int StudentID {get; set;}
        public string? Name {get; set;}
        public string? Email {get; set;}
        public int ClassID {get; set;}
        public virtual Class? Class {get; set;}
    }
}

//Class
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.ComponentModel.DataAnnotations;

namespace Katthak.Models
{
    public class Class
    {
        public int ClassID {get; set;}
        public TimeSpan StartTime {get; set;}
        public TimeSpan EndTime {get; set;}   
        public int Capacity {get; set;}
        public virtual ICollection<Student>? Students {get; set;} 
    }
}

//AppDbContext
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace Katthak.Models
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions <ApplicationDbContext> options) : base(options)
        {
            
        }

        public virtual DbSet<Student> Students {get; set;}
        public virtual DbSet<Class> Classes {get; set;}
    }
}

//ClassController
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Katthak.Models;

namespace Katthak.Controllers
{
    //[Route("[controller]")]
    public class ClassController : Controller
    {
        private readonly ApplicationDbContext db;

        public ClassController(ApplicationDbContext context)
        {
            db = context;
        }

        public IActionResult AvailableClasses()
        {
            int count1 = 0;
            int count2 = 0;
            var stud = db.Students;
            
            foreach(var i in stud)
            {
            if(i.ClassID == 1)
            {
                count1++;
            }
            else if(i.ClassID == 2)
            {
                count2++;
            }
            }
            ViewBag.C1 = count1;
            ViewBag.C2 = count2;
            var classList = db.Classes;
            return View(classList);
        }
        public IActionResult BookedClasses()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View("Error!");
        }
    }
}

//BookingController
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Katthak.Models;

namespace Katthak.Controllers
{
    //[Route("[controller]")]
    public class BookingController : Controller
    {
        private readonly ApplicationDbContext db;

        public BookingController(ApplicationDbContext context)
        {
            db = context;
        }

        public IActionResult ClassEnrollmentForm(int id)
        {
            return View();
        }

        [HttpPost]
        public IActionResult ClassEnrollmentForm(int id, string name, string email)
        {
            Student s = new Student{
                Name = name,
                Email = email,
                ClassID = id
            };

            db.Students.Add(s);
            db.SaveChanges();

            return RedirectToAction("EnrollmentConfirmation", new {id = id});
        }

        public IActionResult EnrollmentConfirmation(int id)
        {
            var stud = db.Classes.Find(id);
            return View(stud);
        }


        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View("Error!");
        }
    }
}

//Class/AvailableClasses
@model IEnumerable<Katthak.Models.Class>
<h4>Available Kathak Dance Classes</h4>
<hr>
<table class="table table-striped">

    <tr>
        <th>Class ID</th>
        <th>Start Time</th>
        <th>End Time</th>
        <th>Total Capacity</th>
        <th>Students Count</th>
        <th>Remaining Count</th>
        <th>Actions</th>
    </tr>

    @foreach(var i in Model)
    {
        <tr>
            <td>@i.ClassID</td>
            <td>@i.StartTime</td>
            <td>@i.EndTime</td>
            <td>@i.Capacity</td>
            @if(i.ClassID==1)
            {
                <td>@ViewBag.C1</td>
            }
            else if(i.ClassID==2)
            {
                <td>@ViewBag.C2</td> 
            }
            @if(i.ClassID==1)
            {
                <td>@(i.Capacity - ViewBag.C1)</td>
            }
            else if(i.ClassID==2)
            {
                <td>@(i.Capacity - ViewBag.C2)</td> 
            }

            @if(i.ClassID==1)
            {
                if((i.Capacity - ViewBag.C1) == 0)
                {
                    <td>
                        <p>Enrollment Over</p>
                    </td>
                }
                else{
                <td>
                    <a asp-controller="Booking" asp-action="ClassEnrollmentForm" asp-route-id=@i.ClassID class="btn btn-primary">Enroll</a>
                </td>
                }
            }
            else if(i.ClassID==2)
            {
                if((i.Capacity - ViewBag.C2) == 0)
                {
                    <td>
                        <p>Enrollment Over</p>
                    </td>
                }
                else{
                <td>
                     <a asp-controller="Booking" asp-action="ClassEnrollmentForm" asp-route-id=@i.ClassID class="btn btn-primary">Enroll</a>
                </td>
                }
            }
            
        </tr>
    }
</table>


//Booking/ClassEnrollmentForm
@model Katthak.Models.Student

<h4>Enroll In Kathak Dance Class</h4>

<hr>

<div class="row">
    <div class="col-4">
        <form method="post" asp-controller="Booking" asp-action="ClassEnrollmentForm">
            
            <div class="form-group">
                <label class="control-label">Your Name</label>
                <input asp-for="Name" class="form-control">
            </div>

            <div class="form-group">
                <label class="control-label">Your Email</label>
                <input asp-for="Email" class="form-control">
            </div>

            <br>

            <div class="form-group">
                 <input type="submit" value="Enroll" class="btn btn-primary">
            </div>
        </form>
    </div>
</div>

//Class/EnrollmentConfirmation
@model Katthak.Models.Class;

<h4>Enrollment Confirmation</h4>
<p>You have successfully enrolled in Kathak dance class.</p>
<hr>

<table class="table table-striped">

    <tr>
        <th>Class ID</th>
        <th>Start Time</th>
        <th>End Time</th>
    </tr>

    
        <tr>
            <td>@Model.ClassID</td>
            <td>@Model.StartTime</td>
            <td>@Model.EndTime</td>
        </tr>
</table>

        <a href="/Class/AvailableClasses" class="btn btn-primary">Back To Available Classes</a>
        


------------------------------------------------------------------------------

using EmpApi.Models;
using Microsoft.AspNetCore.Mvc;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace EmpApi.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class DepartmentController : ControllerBase
    {
        IDept repo;
        public DepartmentController(IDept _repo)
        {
            this.repo = _repo;
        }
        [HttpGet]
        [Route("ListDept")]
        public IActionResult GetDept()
        {
            var data = repo.GetDepartments();
            return Ok(data);
        }
        [HttpPost]
        [Route("Create")]
        public IActionResult PostDept(Department dept)
        {
            if(ModelState.IsValid)
            {
                repo.AddDept(dept);
                return Created("Record Added",dept);
            }
            return BadRequest();
        }
        
        [Route("ListDept/{id}")]
        public IActionResult GetDept (int id)
        {
            var data = repo.FindDept(id);
            return Ok(data);
        }
        [HttpPut]
        [Route("EditDept/{id}")]
        public IActionResult PutDept(int id,Department department)
        {
            repo.EditDept(department);
            return Ok();
        }
        [HttpDelete]
        [Route("DeleteDept/{id}")]
        public IActionResult DeleteDept(int id)
        {
            repo.DeleteDept(id);
            return Ok();
        }
    }
 
}
    

------------------------------------------------------------------

using System.Collections.Generic;

namespace EmpApi.Models
{
    public interface IDept
    {
        List<Department> GetDepartments();
        Department FindDept(int id);
        void AddDept(Department d);
        void EditDept (Department d);
        void DeleteDept(int id);
    }
}

-------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace EmpApi.Models
{
    public class DepartmentRepository: IDept
    {
        EmsdatabaseContext context = new EmsdatabaseContext();
        public void AddDept(Department d)
        {
            context.Departments.Add(d);
            context.SaveChanges();
        }

        public void DeleteDept(int id)
        {
            Department d = context.Departments.Find(id);
            context.Departments.Remove(d);
            context.SaveChanges();

        }

        public void EditDept(Department d)
        {
            Department dept = context.Departments.Find(d.Id);
            dept.DeptName = d.DeptName;
            dept.Location = d.Location;
            context.SaveChanges();
        }

        public Department FindDept(int id)
        {
            var data = context.Departments.Find(id);
            return data;
        }

        public List<Department> GetDepartments()
        {
            return context.Departments.ToList();
        }
    }
}


    public IActionResult List()
{
    // var data = context.Employees.ToList();
    var data = context.Employees.Include("Dept").ToList();
    return View(data);
}